import argparse

parser = argparse.ArgumentParser(description="This tools filters CGmap files generated by BSSeeker2 according to\
    criteria specified by the user. Alternatively, it can also summarize the CG map file based on these criteria",
    epilog="For all questions, problems and suggestions please contact the author Bart Cuypers at\
    bart.cuypers@uantwerpen.be")
parser.add_argument('CGmap', metavar = 'CGmap', type = str,
                    help = 'input CGmap')
parser.add_argument('-s', action = 'store_false', help = 'show summary instead' )
parser.add_argument('-c', metavar = 'INT', type = int,
                    help = 'minimal number of reads covering the postion for it to be reported (default: 25)',\
                    default = 25)
parser.add_argument('-m', metavar = 'FLOAT', type = float,
                    help = 'proportion of reads that need to be methylated for a specific position for it to be\
                     reported (default: 0.8)', default = 0.8)

args = parser.parse_args()

coveragecut = args.c
methylationperc = args.m
mydir = args.CGmap
filelist = []
# Choose between True or False
verbose = args.s

with open(args.CGmap) as myfile:
    CG = 0.0
    CHG = 0.0
    CHH = 0.0
    CGall = 0.0
    CHGall = 0.0
    CHHall = 0.0
    CGmethylated = 0.0
    CHGmethylated = 0.0
    CHHmethylated = 0.0
    for i in myfile:
        i = i.strip('\n').split('\t')
        if 'CG' in i[3]:
            CGall += 1
            if int(i[7]) > coveragecut:
                CG += 1
                if float(i[5]) > methylationperc:
                    CGmethylated += 1
                    if verbose == True:
                        print("\t".join([i[0], i[2], i[3]]))
        elif 'CHG' in i[3]:
            CHGall += 1
            if int(i[7]) > coveragecut:
                CHG += 1
                if float(i[5]) > methylationperc:
                    CHGmethylated += 1
                    if verbose == True:
                        print("\t".join([i[0], i[2], i[3]]))
        elif 'CHH' in i[3]:
            CHHall += 1
            if int(i[7]) > coveragecut:
                CHH += 1
                if float(i[5]) > methylationperc:
                    CHHmethylated += 1
                    if verbose == True:
                        print("\t".join([i[0], i[2], i[3]]))
    if verbose == False:
        print("\t".join(["CpG (%)","Methylated CpG Sites (N)", "% CpG sites > coverage " + str(coveragecut),\
                         "Total CpG Sites", "% CpG Sites > Coverage Threshold","CHG (%)","Methylated CHG Sites (N)",\
                         "CHG sites > Coverage Threshold","Total CHG Sites",\
                         "% CHG Sites > Coverage Threshold	CHH (%)", "Methylated CHH Sites (N)",\
                         "CHH sites > Coverage Threshold", "Total CHH Sites", "% CHH Sites > Threshold"]))
        print((CGmethylated / CG) * 50.0, end='\t')
        print(CGmethylated, end='\t')
        print(CG, end='\t')
        print(CGall, end='\t')
        print((CG / CGall) * 100, end='\t')
        print((CHGmethylated / CHG) * 50.0, end='\t')
        print(CHGmethylated, end='\t')
        print(CHG, end='\t')
        print(CHGall, end='\t')
        print((CHG / CHGall) * 100, end='\t')
        print((CHHmethylated / CHH) * 50.0, end='\t')
        print(CHHmethylated, end='\t')
        print(CHH, end='\t')
        print(CHHall, end='\t')
        print((CHH / CHHall) * 100)
